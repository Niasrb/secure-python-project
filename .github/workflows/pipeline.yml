name: Secure Python CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  security-checks:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Install Vault
        run: |
          curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add -
          sudo apt-add-repository "deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main"
          sudo apt-get update && sudo apt-get install vault

      - name: Setup HashiCorp Vault
        uses: hashicorp/vault-action@v2
        with:
          url: 'http://localhost:8200'
          token: 'dev-only-token'
          method: 'token'

      - name: Verify Vault Connection
        run: |
          vault status || true

      - name: Run Secret Management Audit
        run: |
          python -c "
          from src.secret_management.audit import SecretAuditor
          auditor = SecretAuditor()
          findings = auditor.scan_directory('src/')
          if findings:
              print('WARNING: Potential secrets found in code:')
              for finding in findings:
                  print(f'File: {finding["file"]}, Type: {finding["type"]}, Line: {finding["line"]}')
              exit(1)
          "
        continue-on-error: true

      - name: Run Secret Management Tests
        env:
          VAULT_URL: 'http://localhost:8200'
          VAULT_TOKEN: 'dev-only-token'
        run: |
          vault server -dev &
          sleep 5
          pytest tests/test_secret_management/test_secret_manager.py -v

      - name: Run Bandit security checks
        run: |
           pip install bandit
           bandit -r . --exclude ./venv,./tests -f json -o bandit-results.json
        continue-on-error: true

      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/python@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

      - name: Run Safety Check
        continue-on-error: true
        run: safety check

  code-quality:
    needs: security-checks
    continue-on-error: true
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          pip install -r requirements.txt

      - name: Run Pylint
        run: pylint src/

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  test:
    needs: code-quality
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          pip install -r requirements.txt

      - name: Run tests with coverage
        run: pytest --cov=src tests/ --cov-report=xml

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/secure-python-project:latest